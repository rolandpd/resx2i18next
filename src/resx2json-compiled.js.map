{"version":3,"sources":["resx2json.js"],"names":[],"mappings":"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","file":"resx2json-compiled.js","sourcesContent":["'use strict';\r\n\r\nconst stream = require('stream');\r\nconst glob = require('glob');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst mkdirp = require('mkdirp');\r\nconst xml2js = require(\"xml2js-es6-promise\");\r\nconst console = require('console');\r\n\r\n/**\r\n *\r\n */\r\nclass ResxPathsSource extends stream.Readable {\r\n  constructor(globPaths = []) {\r\n    super({objectMode: true});\r\n    this.filePaths = globPaths;\r\n  }\r\n\r\n  _read() {\r\n    let filePath = this.filePaths.length ? {path: this.filePaths.shift()} : null;\r\n    this.push(filePath);\r\n  }\r\n}\r\n\r\nexports.ResxPathsSource = ResxPathsSource;\r\n\r\n/**\r\n *\r\n */\r\nclass ResolveResxFiles extends stream.Transform {\r\n  constructor(options = {}) {\r\n    options.objectMode = true;\r\n    super(options);\r\n  }\r\n\r\n  _transform(pathElement, encoding, next) {\r\n    if (pathElement) {\r\n      let self = this;\r\n      glob(pathElement.path, function (err, paths) {\r\n        if (err) {\r\n          return next(err);\r\n        }\r\n        paths.forEach(function (unglobbedPath) {\r\n          console.log('--> ' + unglobbedPath);\r\n          self.push({path: unglobbedPath});\r\n        });\r\n        next();\r\n      });\r\n    } else {\r\n      next();\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexports.ResolveResxFiles = ResolveResxFiles;\r\n\r\n\r\nclass TransformResx2Json extends stream.Transform {\r\n\r\n  constructor(options = {}) {\r\n    super({objectMode: true});\r\n\r\n    this.filePattern = options.file || 'locales/{ns}.json';\r\n    this.jsonPath = options.structure || '{module}/{key}/{lng}';\r\n  }\r\n\r\n  static filenameInfo(filename) {\r\n    let ns = path.dirname(filename).split('/').pop();\r\n    let [module, lng] = path.basename(filename, path.extname(filename)).split('.');\r\n    return {\r\n      ns: ns || 'app',\r\n      lng: lng || 'en',\r\n      module: module\r\n    };\r\n  }\r\n\r\n  static replaceTemplate(templateString, obj) {\r\n    return templateString.replace(/{(\\w+)}/g, function (_, k) {\r\n      return obj[k];\r\n    });\r\n  }\r\n\r\n  _transform(resxFile, encoding, next) {\r\n    if (resxFile && resxFile.path) {\r\n      let self = this;\r\n      let info = TransformResx2Json.filenameInfo(resxFile.path);\r\n      fs.readFile(resxFile.path, 'utf8', function (err, data) {\r\n        if (err) {\r\n          next(err);\r\n        }\r\n        xml2js(data)\r\n          .then(function (xml) {\r\n            if (xml.root.data) {\r\n              xml.root.data.forEach(function (item) {\r\n                let translation = {\r\n                  ns: info.ns,\r\n                  lng: info.lng,\r\n                  module: info.module,\r\n                  key: item.$.name,\r\n                  value: item.value && item.value.length === 1 ? item.value[0] : item.value\r\n                };\r\n                translation.path = TransformResx2Json.replaceTemplate(self.jsonPath, translation);\r\n                translation.file = TransformResx2Json.replaceTemplate(self.filePattern, translation);\r\n                console.log(JSON.stringify(translation, null, 2));\r\n                self.push(translation);\r\n              });\r\n            }\r\n            next();\r\n          })\r\n          .catch(function () {\r\n            console.log('Could not parse ' + resxFile.path);\r\n            next(err);\r\n          });\r\n      });\r\n    } else {\r\n      next();\r\n    }\r\n  }\r\n}\r\n\r\nexports.TransformResx2Json = TransformResx2Json;\r\n\r\nclass CollectOutputFiles extends stream.Transform {\r\n\r\n  constructor(options = {}) {\r\n    super({objectMode: true});\r\n    this.outPath = options.out || '';\r\n    this.result = {};\r\n  }\r\n\r\n  _flush(next) {\r\n    let self = this;\r\n    Object.keys(this.result).forEach(function (key) {\r\n      let file = {path: path.join(self.outPath, key), contents: JSON.stringify(self.result[key], null, 2)};\r\n      self.push(file);\r\n    });\r\n    next();\r\n  }\r\n\r\n  _transform(translation, encoding, next) {\r\n    if (translation) {\r\n      if (!this.result[translation.file]) {\r\n        this.result[translation.file] = {};\r\n      }\r\n\r\n      let currentPath = this.result[translation.file];\r\n      let paths = translation.path.split('/');\r\n      for (let i = 0; i < paths.length; i++) {\r\n        if (!currentPath[paths[i]]) {\r\n          currentPath[paths[i]] = (i + 1) === paths.length ? translation.value : {};\r\n        }\r\n        currentPath = currentPath[paths[i]];\r\n      }\r\n      next();\r\n    } else {\r\n      next();\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexports.CollectOutputFiles = CollectOutputFiles;\r\n\r\nclass OutputFiles extends stream.Writable {\r\n  constructor() {\r\n    super({objectMode: true});\r\n  }\r\n\r\n  _write(file, enc, next) {\r\n    console.log('Write ' + file.path);\r\n    mkdirp(path.dirname(file.path), function (err) {\r\n      if (err) {\r\n        return next(err);\r\n      }\r\n      let wstream = fs.createWriteStream(file.path);\r\n      wstream.write(file.contents);\r\n      wstream.end();\r\n      wstream.on('error', next)\r\n        .on('finish', next);\r\n    });\r\n\r\n  }\r\n}\r\n\r\nexports.OutputFiles = OutputFiles;\r\n\r\nexports.convert = function (sources, target, callback, filePattern = 'app.json', structure = '{lng}/app/{module}/{key}') {\r\n  let resxSourcePaths = new ResxPathsSource(sources);\r\n  let resolveResxFiles = new ResolveResxFiles();\r\n  let transformResx2Json = new TransformResx2Json({\r\n    file: filePattern,\r\n    structure: structure\r\n  });\r\n  let collectOutputFiles = new CollectOutputFiles({out: target});\r\n  let outputFiles = new OutputFiles();\r\n\r\n  return resxSourcePaths\r\n    .pipe(resolveResxFiles)\r\n    .pipe(transformResx2Json)\r\n    .pipe(collectOutputFiles)\r\n    .pipe(outputFiles)\r\n    .on('error', callback)\r\n    .on('finish', callback);\r\n};"]}